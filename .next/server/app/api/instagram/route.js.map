{"version":3,"file":"app/api/instagram/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/./src/app/api/instagram/route.js","webpack://_N_E/./src/app/api/instagram/route.js?4aab","webpack://_N_E/?9322"],"sourcesContent":["module.exports = require(\"node:buffer\");","module.exports = require(\"node:async_hooks\");","import { NextResponse } from 'next/server';\n\nexport const runtime = 'edge';\n\n// Enhanced logging function for debugging\nfunction debugLog(message, data = null) {\n  console.log(`[Instagram API Debug] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n}\n\n// Function to validate access token\nasync function validateAccessToken(accessToken) {\n  try {\n    const url = `https://graph.instagram.com/me?fields=id,username&access_token=${accessToken}`;\n    const response = await fetch(url);\n    const data = await response.json();\n    \n    debugLog('Token validation response:', data);\n    \n    if (!response.ok) {\n      throw new Error(`Token validation failed: ${data.error?.message || 'Unknown error'}`);\n    }\n    \n    return { valid: true, data };\n  } catch (error) {\n    debugLog('Token validation error:', error.message);\n    return { valid: false, error: error.message };\n  }\n}\n\n// Enhanced function to get Instagram profile with more debugging\nasync function getInstagramProfile(accessToken) {\n  try {\n    debugLog('Fetching Instagram profile...');\n    \n    const fieldsToFetch = [\n      'account_type',\n      'id',\n      'media_count',\n      'username'\n    ].join(',');\n    \n    const url = `https://graph.instagram.com/me?fields=${fieldsToFetch}&access_token=${accessToken}`;\n    debugLog('Profile API URL:', url.replace(accessToken, '[HIDDEN_TOKEN]'));\n    \n    const response = await fetch(url);\n    const data = await response.json();\n    \n    debugLog('Profile API Response Status:', response.status);\n    debugLog('Profile API Response Data:', data);\n    \n    if (!response.ok) {\n      throw new Error(`Profile fetch error: ${data.error?.message || 'Unknown error'}`);\n    }\n    \n    return data;\n  } catch (error) {\n    debugLog('Profile fetch error:', error.message);\n    throw new Error(`Error connecting to Instagram: ${error.message}`);\n  }\n}\n\n// Enhanced function to get Instagram media with comprehensive debugging\nasync function getInstagramMedia(accessToken, limit = 25, after = null) {\n  try {\n    debugLog(`Fetching Instagram media - Limit: ${limit}, After: ${after}`);\n    \n    const fieldsToFetch = [\n      'id',\n      'caption',\n      'media_type',\n      'media_url',\n      'permalink',\n      'thumbnail_url',\n      'timestamp',\n      'username',\n      'children{id,media_type,media_url,thumbnail_url}'\n    ].join(',');\n    \n    let url = `https://graph.instagram.com/me/media?fields=${fieldsToFetch}&limit=${limit}&access_token=${accessToken}`;\n    \n    if (after) {\n      url += `&after=${after}`;\n    }\n    \n    debugLog('Media API URL:', url.replace(accessToken, '[HIDDEN_TOKEN]'));\n    \n    const response = await fetch(url);\n    const data = await response.json();\n    \n    debugLog('Media API Response Status:', response.status);\n    debugLog('Media API Response Headers:', Object.fromEntries(response.headers.entries()));\n    debugLog('Media API Raw Response:', data);\n    \n    if (!response.ok) {\n      debugLog('Media API Error Details:', {\n        status: response.status,\n        statusText: response.statusText,\n        error: data.error\n      });\n      throw new Error(`Media fetch error: ${data.error?.message || 'Unknown error'}`);\n    }\n    \n    debugLog('Media fetch successful:', {\n      dataCount: data.data ? data.data.length : 0,\n      hasPaging: !!data.paging,\n      pagingInfo: data.paging\n    });\n    \n    return {\n      data: data.data || [],\n      paging: data.paging || {}\n    };\n  } catch (error) {\n    debugLog('Media fetch error:', error.message);\n    throw new Error(`Error fetching Instagram posts: ${error.message}`);\n  }\n}\n\n// Function to generate title from caption\nfunction generateTitleFromCaption(caption) {\n  if (!caption || typeof caption !== 'string') {\n    return 'Post without title';\n  }\n  \n  const cleanCaption = caption.replace(/#\\w+/g, '').replace(/@\\w+/g, '').trim();\n  \n  if (cleanCaption.length <= 50) {\n    return cleanCaption;\n  }\n  \n  const sentences = cleanCaption.split(/[.!?]/);\n  const firstSentence = sentences[0].trim();\n  \n  if (firstSentence.length > 0 && firstSentence.length <= 50) {\n    return firstSentence;\n  }\n  \n  return cleanCaption.substring(0, 47).trim() + '...';\n}\n\n// Enhanced function to format Instagram media with better error handling\nfunction formatInstagramMedia(media) {\n  debugLog('Formatting media data:', { mediaCount: media.length });\n  \n  const mediaArray = Array.isArray(media) ? media : [media];\n  \n  return mediaArray.map((item, index) => {\n    debugLog(`Processing media item ${index + 1}:`, {\n      id: item.id,\n      media_type: item.media_type,\n      hasCaption: !!item.caption,\n      hasMediaUrl: !!item.media_url,\n      hasChildren: !!(item.children && item.children.data)\n    });\n    \n    const images = [];\n    \n    try {\n      // Handle carousel posts\n      if (item.media_type === 'CAROUSEL_ALBUM' && item.children && item.children.data) {\n        debugLog(`Processing carousel with ${item.children.data.length} items`);\n        item.children.data.forEach((child, childIndex) => {\n          debugLog(`Carousel child ${childIndex + 1}:`, {\n            id: child.id,\n            media_type: child.media_type,\n            hasMediaUrl: !!child.media_url,\n            hasThumbnailUrl: !!child.thumbnail_url\n          });\n          \n          if (child.media_type === 'IMAGE') {\n            images.push(child.media_url);\n          } else if (child.media_type === 'VIDEO' && child.thumbnail_url) {\n            images.push(child.thumbnail_url);\n          }\n        });\n      } else if (item.media_type === 'IMAGE') {\n        debugLog('Processing single image');\n        images.push(item.media_url);\n      } else if (item.media_type === 'VIDEO' && item.thumbnail_url) {\n        debugLog('Processing video with thumbnail');\n        images.push(item.thumbnail_url);\n      }\n      \n      const formattedItem = {\n        id: item.id,\n        titulo: generateTitleFromCaption(item.caption),\n        data: item.timestamp,\n        legenda: item.caption || '',\n        images: images,\n        mediaType: item.media_type,\n        mediaUrl: item.media_url,\n        thumbnailUrl: item.thumbnail_url,\n        permalink: item.permalink,\n        username: item.username,\n        isCarousel: item.media_type === 'CAROUSEL_ALBUM'\n      };\n      \n      debugLog(`Formatted item ${index + 1}:`, {\n        id: formattedItem.id,\n        imageCount: formattedItem.images.length,\n        hasTitle: !!formattedItem.titulo,\n        mediaType: formattedItem.mediaType\n      });\n      \n      return formattedItem;\n      \n    } catch (error) {\n      debugLog(`Error processing media item ${index + 1}:`, error.message);\n      return {\n        id: item.id || 'unknown',\n        titulo: 'Error processing post',\n        data: item.timestamp || new Date().toISOString(),\n        legenda: item.caption || '',\n        images: [],\n        mediaType: item.media_type || 'unknown',\n        mediaUrl: item.media_url || '',\n        thumbnailUrl: item.thumbnail_url || '',\n        permalink: item.permalink || '',\n        username: item.username || '',\n        isCarousel: false,\n        error: error.message\n      };\n    }\n  });\n}\n\n// Main GET function with comprehensive debugging\nexport async function GET(request) {\n  try {\n    debugLog('=== Instagram API GET Request Started ===');\n    \n    const { searchParams } = new URL(request.url);\n    const mediaId = searchParams.get('id');\n    const limit = parseInt(searchParams.get('limit')) || 25;\n    const after = searchParams.get('after');\n    \n    debugLog('Request parameters:', { mediaId, limit, after });\n    \n    // Check if access token is configured\n    const accessToken = process.env.INSTAGRAM_ACCESS_TOKEN;\n    \n    if (!accessToken) {\n      debugLog('ERROR: Instagram Access Token not configured');\n      return NextResponse.json(\n        { \n          error: 'Instagram Access Token not configured. Use token obtained via Instagram Login.',\n          debug: {\n            hasToken: false,\n            envVarsPresent: {\n              INSTAGRAM_CLIENT_ID: !!process.env.INSTAGRAM_CLIENT_ID,\n              INSTAGRAM_CLIENT_SECRET: !!process.env.INSTAGRAM_CLIENT_SECRET,\n              INSTAGRAM_REDIRECT_URI: !!process.env.INSTAGRAM_REDIRECT_URI\n            }\n          }\n        },\n        { status: 500 }\n      );\n    }\n    \n    debugLog('Access token present:', accessToken.substring(0, 10) + '...');\n    \n    // Validate access token first\n    const tokenValidation = await validateAccessToken(accessToken);\n    if (!tokenValidation.valid) {\n      debugLog('Token validation failed');\n      return NextResponse.json(\n        { \n          error: `Invalid access token: ${tokenValidation.error}`,\n          debug: {\n            tokenValid: false,\n            tokenError: tokenValidation.error\n          }\n        },\n        { status: 401 }\n      );\n    }\n    \n    debugLog('Token validation successful');\n    \n    // If specific media ID is requested\n    if (mediaId) {\n      debugLog(`Fetching specific media: ${mediaId}`);\n      try {\n        const mediaData = await getSpecificInstagramMedia(mediaId, accessToken);\n        const formattedMedia = formatInstagramMedia([mediaData])[0];\n        debugLog('Specific media fetch successful');\n        return NextResponse.json(formattedMedia);\n      } catch (error) {\n        debugLog('Specific media fetch failed:', error.message);\n        return NextResponse.json(\n          { error: error.message, debug: { mediaId, tokenValid: true } },\n          { status: 404 }\n        );\n      }\n    }\n    \n    // Fetch user profile\n    debugLog('Fetching user profile...');\n    const profile = await getInstagramProfile(accessToken);\n    debugLog('Profile fetch successful:', {\n      username: profile.username,\n      mediaCount: profile.media_count,\n      accountType: profile.account_type\n    });\n    \n    // Fetch all media\n    debugLog('Fetching media posts...');\n    const mediaResponse = await getInstagramMedia(accessToken, limit, after);\n    debugLog('Media fetch completed:', {\n      postsReturned: mediaResponse.data.length,\n      hasPaging: !!mediaResponse.paging,\n      nextPage: mediaResponse.paging?.next\n    });\n    \n    const formattedMedia = formatInstagramMedia(mediaResponse.data);\n    debugLog('Media formatting completed:', {\n      formattedCount: formattedMedia.length,\n      postsWithImages: formattedMedia.filter(p => p.images.length > 0).length,\n      postsWithErrors: formattedMedia.filter(p => p.error).length\n    });\n    \n    const response = {\n      profile: {\n        id: profile.id,\n        username: profile.username,\n        accountType: profile.account_type,\n        mediaCount: profile.media_count\n      },\n      posts: formattedMedia,\n      total: formattedMedia.length,\n      paging: mediaResponse.paging,\n      hasMore: !!mediaResponse.paging.next,\n      debug: {\n        tokenValid: true,\n        profileFetched: true,\n        mediaFetched: true,\n        originalMediaCount: mediaResponse.data.length,\n        formattedMediaCount: formattedMedia.length,\n        accountMediaCount: profile.media_count,\n        requestParams: { limit, after }\n      }\n    };\n    \n    debugLog('=== Instagram API GET Request Completed Successfully ===');\n    return NextResponse.json(response);\n    \n  } catch (error) {\n    debugLog('=== Instagram API GET Request Failed ===');\n    debugLog('Final error:', error.message);\n    console.error('Complete error stack:', error);\n    \n    return NextResponse.json(\n      { \n        error: `Error processing request: ${error.message}`,\n        debug: {\n          errorType: error.constructor.name,\n          errorMessage: error.message,\n          timestamp: new Date().toISOString()\n        }\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// Function to get specific Instagram media with debugging\nasync function getSpecificInstagramMedia(mediaId, accessToken) {\n  try {\n    debugLog(`Fetching specific media: ${mediaId}`);\n    \n    const fieldsToFetch = [\n      'id',\n      'caption',\n      'media_type',\n      'media_url',\n      'permalink',\n      'thumbnail_url',\n      'timestamp',\n      'username',\n      'children{id,media_type,media_url,thumbnail_url}'\n    ].join(',');\n    \n    const url = `https://graph.instagram.com/${mediaId}?fields=${fieldsToFetch}&access_token=${accessToken}`;\n    debugLog('Specific media URL:', url.replace(accessToken, '[HIDDEN_TOKEN]'));\n    \n    const response = await fetch(url);\n    const data = await response.json();\n    \n    debugLog('Specific media response:', { status: response.status, data });\n    \n    if (!response.ok) {\n      throw new Error(`Error fetching media: ${data.error?.message || 'Media not found'}`);\n    }\n    \n    return data;\n  } catch (error) {\n    debugLog('Specific media fetch error:', error.message);\n    throw new Error(`Error fetching specific media: ${error.message}`);\n  }\n}\n\n// Keep existing POST and PUT functions unchanged\nexport async function POST(request) {\n  // ... (same as original)\n}\n\nexport async function PUT(request) {\n  // ... (same as original)\n}","import { AppRouteRouteModule } from \"next/dist/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/lib/constants\";\nimport { NoFallbackError } from \"next/dist/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/server/response-cache\";\nimport * as userland from \"/mnt/c/Users/win/Desktop/arquivos_secretos/cerqueira-fullstack/src/app/api/instagram/route.js\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/instagram/route\",\n        pathname: \"/api/instagram\",\n        filename: \"route\",\n        bundlePath: \"app/api/instagram/route\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    projectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"/mnt/c/Users/win/Desktop/arquivos_secretos/cerqueira-fullstack/src/app/api/instagram/route.js\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/instagram/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map","var _self___RSC_MANIFEST;\nimport { createServerModuleMap } from \"next/dist/server/app-render/action-utils\";\nimport { setReferenceManifestsSingleton } from \"next/dist/server/app-render/encryption-utils\";\nimport { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Finstagram%2Froute&page=%2Fapi%2Finstagram%2Froute&pagePath=private-next-app-dir%2Fapi%2Finstagram%2Froute.js&appDir=%2Fmnt%2Fc%2FUsers%2Fwin%2FDesktop%2Farquivos_secretos%2Fcerqueira-fullstack%2Fsrc%2Fapp&appPaths=%2Fapi%2Finstagram%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!private-next-app-dir/api/instagram/route.js?__next_edge_ssr_entry__\";\nconst nextConfig = {\"env\":{},\"webpack\":null,\"eslint\":{\"ignoreDuringBuilds\":true},\"typescript\":{\"ignoreBuildErrors\":true,\"tsconfigPath\":\"tsconfig.json\"},\"distDir\":\".next\",\"cleanDistDir\":true,\"assetPrefix\":\"\",\"cacheMaxMemorySize\":52428800,\"configOrigin\":\"next.config.ts\",\"useFileSystemPublicRoutes\":true,\"generateEtags\":true,\"pageExtensions\":[\"tsx\",\"ts\",\"jsx\",\"js\"],\"poweredByHeader\":true,\"compress\":true,\"images\":{\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"loaderFile\":\"\",\"domains\":[],\"disableStaticImages\":false,\"minimumCacheTTL\":60,\"formats\":[\"image/webp\"],\"dangerouslyAllowSVG\":false,\"contentSecurityPolicy\":\"script-src 'none'; frame-src 'none'; sandbox;\",\"contentDispositionType\":\"attachment\",\"remotePatterns\":[],\"unoptimized\":false},\"devIndicators\":{\"position\":\"bottom-left\"},\"onDemandEntries\":{\"maxInactiveAge\":60000,\"pagesBufferLength\":5},\"amp\":{\"canonicalBase\":\"\"},\"basePath\":\"\",\"sassOptions\":{},\"trailingSlash\":false,\"i18n\":null,\"productionBrowserSourceMaps\":false,\"excludeDefaultMomentLocales\":true,\"serverRuntimeConfig\":{},\"publicRuntimeConfig\":{},\"reactProductionProfiling\":false,\"reactStrictMode\":null,\"reactMaxHeadersLength\":6000,\"httpAgentOptions\":{\"keepAlive\":true},\"logging\":{},\"compiler\":{},\"expireTime\":31536000,\"staticPageGenerationTimeout\":60,\"modularizeImports\":{\"@mui/icons-material\":{\"transform\":\"@mui/icons-material/{{member}}\"},\"lodash\":{\"transform\":\"lodash/{{member}}\"}},\"outputFileTracingRoot\":\"/mnt/c/Users/win/Desktop/arquivos_secretos/cerqueira-fullstack\",\"experimental\":{\"useSkewCookie\":false,\"nodeMiddleware\":false,\"cacheLife\":{\"default\":{\"stale\":300,\"revalidate\":900,\"expire\":4294967294},\"seconds\":{\"stale\":0,\"revalidate\":1,\"expire\":60},\"minutes\":{\"stale\":300,\"revalidate\":60,\"expire\":3600},\"hours\":{\"stale\":300,\"revalidate\":3600,\"expire\":86400},\"days\":{\"stale\":300,\"revalidate\":86400,\"expire\":604800},\"weeks\":{\"stale\":300,\"revalidate\":604800,\"expire\":2592000},\"max\":{\"stale\":300,\"revalidate\":2592000,\"expire\":4294967294}},\"cacheHandlers\":{},\"cssChunking\":true,\"multiZoneDraftMode\":false,\"appNavFailHandling\":false,\"prerenderEarlyExit\":true,\"serverMinification\":true,\"serverSourceMaps\":false,\"linkNoTouchStart\":false,\"caseSensitiveRoutes\":false,\"clientSegmentCache\":false,\"dynamicOnHover\":false,\"preloadEntriesOnStart\":true,\"clientRouterFilter\":true,\"clientRouterFilterRedirects\":false,\"fetchCacheKeyPrefix\":\"\",\"middlewarePrefetch\":\"flexible\",\"optimisticClientCache\":true,\"manualClientBasePath\":false,\"cpus\":11,\"memoryBasedWorkersCount\":false,\"imgOptConcurrency\":null,\"imgOptTimeoutInSeconds\":7,\"imgOptMaxInputPixels\":268402689,\"imgOptSequentialRead\":null,\"isrFlushToDisk\":true,\"workerThreads\":false,\"optimizeCss\":false,\"nextScriptWorkers\":false,\"scrollRestoration\":false,\"externalDir\":false,\"disableOptimizedLoading\":false,\"gzipSize\":true,\"craCompat\":false,\"esmExternals\":true,\"fullySpecified\":false,\"swcTraceProfiling\":false,\"forceSwcTransforms\":false,\"largePageDataBytes\":128000,\"typedRoutes\":false,\"typedEnv\":false,\"parallelServerCompiles\":false,\"parallelServerBuildTraces\":false,\"ppr\":false,\"authInterrupts\":false,\"webpackMemoryOptimizations\":false,\"optimizeServerReact\":true,\"viewTransition\":false,\"routerBFCache\":false,\"removeUncaughtErrorAndRejectionListeners\":false,\"validateRSCRequestHeaders\":false,\"staleTimes\":{\"dynamic\":0,\"static\":300},\"serverComponentsHmrCache\":true,\"staticGenerationMaxConcurrency\":8,\"staticGenerationMinPagesPerWorker\":25,\"dynamicIO\":false,\"inlineCss\":false,\"useCache\":false,\"globalNotFound\":false,\"devtoolNewPanelUI\":false,\"devtoolSegmentExplorer\":false,\"browserDebugInfoInTerminal\":false,\"optimizeRouterScrolling\":false,\"strictNextHead\":true,\"trustHostHeader\":true,\"optimizePackageImports\":[\"lucide-react\",\"date-fns\",\"lodash-es\",\"ramda\",\"antd\",\"react-bootstrap\",\"ahooks\",\"@ant-design/icons\",\"@headlessui/react\",\"@headlessui-float/react\",\"@heroicons/react/20/solid\",\"@heroicons/react/24/solid\",\"@heroicons/react/24/outline\",\"@visx/visx\",\"@tremor/react\",\"rxjs\",\"@mui/material\",\"@mui/icons-material\",\"recharts\",\"react-use\",\"effect\",\"@effect/schema\",\"@effect/platform\",\"@effect/platform-node\",\"@effect/platform-browser\",\"@effect/platform-bun\",\"@effect/sql\",\"@effect/sql-mssql\",\"@effect/sql-mysql2\",\"@effect/sql-pg\",\"@effect/sql-sqlite-node\",\"@effect/sql-sqlite-bun\",\"@effect/sql-sqlite-wasm\",\"@effect/sql-sqlite-react-native\",\"@effect/rpc\",\"@effect/rpc-http\",\"@effect/typeclass\",\"@effect/experimental\",\"@effect/opentelemetry\",\"@material-ui/core\",\"@material-ui/icons\",\"@tabler/icons-react\",\"mui-core\",\"react-icons/ai\",\"react-icons/bi\",\"react-icons/bs\",\"react-icons/cg\",\"react-icons/ci\",\"react-icons/di\",\"react-icons/fa\",\"react-icons/fa6\",\"react-icons/fc\",\"react-icons/fi\",\"react-icons/gi\",\"react-icons/go\",\"react-icons/gr\",\"react-icons/hi\",\"react-icons/hi2\",\"react-icons/im\",\"react-icons/io\",\"react-icons/io5\",\"react-icons/lia\",\"react-icons/lib\",\"react-icons/lu\",\"react-icons/md\",\"react-icons/pi\",\"react-icons/ri\",\"react-icons/rx\",\"react-icons/si\",\"react-icons/sl\",\"react-icons/tb\",\"react-icons/tfi\",\"react-icons/ti\",\"react-icons/vsc\",\"react-icons/wi\"]},\"htmlLimitedBots\":\"Mediapartners-Google|Chrome-Lighthouse|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti\",\"bundlePagesRouterDependencies\":false,\"configFile\":\"/mnt/c/Users/win/Desktop/arquivos_secretos/cerqueira-fullstack/next.config.ts\",\"configFileName\":\"next.config.ts\",\"turbopack\":{\"root\":\"/mnt/c/Users/win/Desktop/arquivos_secretos/cerqueira-fullstack\"}}\nconst maybeJSONParse = (str)=>str ? JSON.parse(str) : undefined;\nconst rscManifest = (_self___RSC_MANIFEST = self.__RSC_MANIFEST) == null ? void 0 : _self___RSC_MANIFEST[\"/api/instagram/route\"];\nconst rscServerManifest = maybeJSONParse(self.__RSC_SERVER_MANIFEST);\nif (rscManifest && rscServerManifest) {\n    setReferenceManifestsSingleton({\n        page: \"/api/instagram/route\",\n        clientReferenceManifest: rscManifest,\n        serverActionsManifest: rscServerManifest,\n        serverModuleMap: createServerModuleMap({\n            serverActionsManifest: rscServerManifest\n        })\n    });\n}\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule, {\n    nextConfig\n});\n\n//# sourceMappingURL=edge-app-route.js.map"],"names":["runtime","debugLog","message","data","console","log","JSON","stringify","validateAccessToken","accessToken","url","response","fetch","json","ok","error","valid","getInstagramProfile","fieldsToFetch","replace","status","getInstagramMedia","limit","after","Object","fromEntries","headers","entries","statusText","dataCount","length","hasPaging","paging","pagingInfo","Error","formatInstagramMedia","media","mediaCount","mediaArray","Array","isArray","map","item","index","id","media_type","hasCaption","caption","hasMediaUrl","media_url","hasChildren","children","images","forEach","child","childIndex","hasThumbnailUrl","thumbnail_url","push","formattedItem","titulo","generateTitleFromCaption","cleanCaption","trim","firstSentence","split","substring","timestamp","legenda","mediaType","mediaUrl","thumbnailUrl","permalink","username","isCarousel","imageCount","hasTitle","Date","toISOString","GET","request","searchParams","URL","mediaId","get","parseInt","process","env","INSTAGRAM_ACCESS_TOKEN","NextResponse","debug","hasToken","envVarsPresent","INSTAGRAM_CLIENT_ID","INSTAGRAM_CLIENT_SECRET","INSTAGRAM_REDIRECT_URI","tokenValidation","tokenValid","tokenError","mediaData","getSpecificInstagramMedia","formattedMedia","profile","media_count","accountType","account_type","mediaResponse","postsReturned","nextPage","next","formattedCount","postsWithImages","filter","p","postsWithErrors","posts","total","hasMore","profileFetched","mediaFetched","originalMediaCount","formattedMediaCount","accountMediaCount","requestParams","errorType","name","errorMessage","POST","PUT"],"sourceRoot":"","ignoreList":[]}